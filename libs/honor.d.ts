// Generated by dts-bundle v0.7.3

declare const name = "Honor";
declare const version = "0.0.1-beta";
declare const load: (params_0: any, params_1?: any) => Promise<unknown>;
declare let DEBUG_MODE: boolean;
declare global {
    interface Window {
        Laya3D: any;
    }
}
/** 运行游戏
  * @param GameConfig 是Laya自动生成的游戏配置 src/GameConfig
  * @param callback 游戏运行完成之后执行函数
  */
declare function run(GameConfig: any, callback: any): void;
export declare const Honor: {
    name: string;
    version: string;
    run: typeof run;
    director: {
        init(): void;
        onResize(): void;
        runScene(url: any, ...params: any[]): Promise<void | Laya.Scene>;
        readonly runningScene: any;
        openDialog(url: any, params?: any[], config?: import("./UI/Base/Dialog").HonorDialogConfig, use_exist?: boolean): Promise<import("./UI/Base/Dialog").HonorDialog>;
        getDialogByName(name: any): laya.display.Node;
        getDialogsByGroup(group: any): any[];
        closeDialogByName(name: any): void;
        closeDialogsByGroup(group: any): void;
        closeAllDialogs(): void;
        setLoadPageForScene(url: any, callback: any): void;
        setLoadPageForDialog(url: any, callback: any): void;
    };
    load: (params_0: any, params_1?: any) => Promise<unknown>;
    sceneChangeMonitor: typeof sceneChangeMonitor;
    DirectorView: {
        init(): void;
        onResize(width: any, height: any): void;
        _createLoadViewByClass(loadType: any, callback: any, view: any): void;
        _createLoadViewByData(type: any, url: any, callback: any, obj: any): void;
        recoverView(view: any): void;
        getViewByPool(url: any): any;
        createView(data: any, ctor: any, url: string, params?: any[]): Promise<unknown>;
        setLoadView(type: import("./UI/View").ViewType, url: string, callback: any): void;
        setLoadViewVisible(type: import("./UI/View").ViewType, visible: boolean): void;
        setLoadProgress(type: any, val: any): void;
        getView(type: any): any;
        setViewVisible(type: any, visible: any): void;
        addView(type: any, view: any): void;
        addViewAt(type: any, view: any, index: any): void;
    };
    DEBUG_MODE: boolean;
};
export { name, version, run, Director as director, load, sceneChangeMonitor, DirectorView, DEBUG_MODE, };

export const Director: {
    init(): void;
    onResize(): void;
    runScene(url: any, ...params: any[]): Promise<void | Laya.Scene>;
    readonly runningScene: any;
    openDialog(url: any, params?: any[], config?: HonorDialogConfig, use_exist?: boolean): Promise<import("./Base/Dialog").HonorDialog>;
    getDialogByName(name: any): laya.display.Node;
    getDialogsByGroup(group: any): any[];
    closeDialogByName(name: any): void;
    closeDialogsByGroup(group: any): void;
    closeAllDialogs(): void;
    setLoadPageForScene(url: any, callback: any): void;
    setLoadPageForDialog(url: any, callback: any): void;
};

export function onSceneChangeBefore(fn: SceneChangeListener): void;
export function onSceneChangeAfter(fn: SceneChangeListener): void;
export function clearListener(fn: SceneChangeListener): void;

export interface HonorLoadScene {
    /** 关闭调用 */
    onReset(): void;
    /** 打开调用 */
    onShow(): void;
    /** 设置进度 */
    onProgress(val: number): void;
}
export interface HonorScene extends Laya.Scene {
    onMounted(...param: any[]): void;
}
export type ViewType = 'Scene' | 'Dialog' | 'Alert';
export const DirectorView: {
    init(): void;
    onResize(width: any, height: any): void;
    _createLoadViewByClass(loadType: any, callback: any, view: any): void;
    _createLoadViewByData(type: any, url: any, callback: any, obj: any): void;
    recoverView(view: any): void;
    getViewByPool(url: any): any;
    /** 通过 view 的 ui 数据创建 view  */
    createView(data: any, ctor: any, url: string, params?: any[]): Promise<unknown>;
    setLoadView(type: ViewType, url: string, callback: any): void;
    setLoadViewVisible(type: ViewType, visible: boolean): void;
    setLoadProgress(type: any, val: any): void;
    getView(type: any): any;
    setViewVisible(type: any, visible: any): void;
    addView(type: any, view: any): void;
    addViewAt(type: any, view: any, index: any): void;
};

export type HonorDialogConfig = {
    /** 在弹窗模式为multiple时，是否在弹窗弹窗的时候关闭其他显示中的弹窗 */
    closeOther?: boolean;
    /** 模式窗口点击遮罩，是否关闭窗口，默认是关闭的 */
    closeOnSide?: boolean;
    /** 在弹窗模式为multiple时，是否在弹窗弹窗的时候关闭相同group属性的弹窗 */
    closeByGroup?: boolean;
    /** 在弹窗模式为multiple时，是否在弹窗弹窗的时候关闭相同name属性的弹窗 */
    closeByName?: boolean;
    /** 指定对话框是否居中弹。 如果值为true，则居中弹出，否则，则根据对象坐标显示，默认为true。 */
    shadowAlpha?: number;
    /** 弹出框背景透明度 */
    shadowColor?: string;
    /** 指定时间内自动关闭，单位为ms，默认不打开此功能 */
    autoClose?: boolean | number;
};
export const DEFAULT_CONFIG: HonorDialogConfig;
/** Honor 中 dialog支持的接口 */
export interface HonorDialog extends Laya.Dialog {
    config?: HonorDialogConfig;
    /** 弹出层打开之前调用... */
    onMounted?(...params: any[]): void;
    onResize?(width?: number, height?: number): void;
}

export type SceneChangeListener = (cur1: string, cur2: string) => boolean | void;
export type SceneChangeData = {
    cur: string;
    prev: string;
};
export const SceneManager: {
    sceneChangeBeforeListener: SceneChangeListener[];
    sceneChangeAfterListener: SceneChangeListener[];
    sceneClassMap: {};
    _curScene: any;
    __init__(): void;
    onResize(width: any, height: any): void;
    switchScene(params: any[], scene: HonorScene): SceneChangeData;
    callChangeListener(type: "after" | "before", ...params: string[]): boolean;
    /** 运行场景 */
    runScene(url: any, ...params: any[]): Promise<Laya.Scene>;
    runSceneByCtor(url: any, obj: any): Promise<unknown>;
};
export default SceneManager;

